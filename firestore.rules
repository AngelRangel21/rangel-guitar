rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRequestingUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // This is the most reliable way to check for admin status.
    // It safely checks for the document's existence before trying to access its data.
    function isAdmin() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return isAuthenticated() && exists(userDocPath) && get(userDocPath).data.isAdmin == true;
    }

    // --- Collection Rules ---

    // USERS: Contains user profiles.
    match /users/{userId} {
      // Anyone authenticated can read basic profile info (needed for isAdmin function to work).
      allow read: if isAuthenticated();
      
      // A user can only create their own profile.
      allow create: if isRequestingUser(userId);
      
      // A user can only update their own profile.
      allow update: if isRequestingUser(userId);
      
      // Nobody can delete user profiles for safety.
      allow delete: if false;
    }
    
    // SONGS: Contains all song data.
    match /songs/{songId} {
      // Anyone, even unauthenticated visitors, can read songs.
      allow read: if true;

      // Only admins can create, update, or delete songs.
      allow create, update, delete: if isAdmin();
    }
    
    // SONG-REQUESTS: Contains user song requests.
    match /song-requests/{requestId} {
      // Only admins can view the list of requests.
      allow read: if isAdmin();

      // Any authenticated user can create a song request.
      allow create: if isAuthenticated();
      
      // Only admins can delete a song request.
      allow delete: if isAdmin();
    }
  }
}
