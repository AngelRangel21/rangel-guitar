
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthed() {
      return request.auth != null;
    }

    // Helper function to check if the user is an admin.
    // This is safe to call even for unauthenticated users.
    function isAdmin() {
      return isAuthed() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // User profiles:
    // - Users can create their own profile on signup.
    // - Users can only read or update their own profile.
    match /users/{userId} {
      allow create: if isAuthed() && request.auth.uid == userId;
      allow read, update: if isAuthed() && request.auth.uid == userId;
      allow delete: if false; // Deleting user accounts is disabled for safety.
    }

    // Songs:
    match /songs/{songId} {
      // Anyone can read songs.
      allow read: if true;
      // Only admins can create or delete songs.
      allow create, delete: if isAdmin();
      
      // Updates are allowed under specific conditions:
      allow update: if 
        // 1. Admins can update any field.
        isAdmin() ||
        // 2. Authenticated users can update ONLY the 'likeCount' field.
        (isAuthed() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount'])) ||
        // 3. Anyone (even unauthenticated) can update ONLY the 'visitCount' field.
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['visitCount']));
    }

    // Song Requests:
    // - Any authenticated user can create a request.
    // - Only admins can read or delete requests.
    match /song-requests/{requestId} {
      allow create: if isAuthed();
      allow read, delete: if isAdmin();
    }
  }
}
