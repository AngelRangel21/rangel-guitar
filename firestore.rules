
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      // Robust check: ensure the user document exists and isAdmin is true
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can read user profiles (needed for isAdmin check to work)
      // but a user can only write to their own document.
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Song requests can be read/deleted by admins and created by any authenticated user
    match /song-requests/{requestId} {
      allow read, delete: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null;
    }

    // Songs collection rules
    match /songs/{songId} {
      // Anyone can read songs
      allow read: if true;
      
      // Only admins can create or delete songs
      allow create, delete: if request.auth != null && isAdmin(request.auth.uid);

      // Update logic
      allow update: if 
        // Admins can update anything
        (request.auth != null && isAdmin(request.auth.uid)) ||
        // Anyone can increment visitCount by exactly 1, and change nothing else
        (
          request.resource.data.visitCount == resource.data.visitCount + 1 &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['visitCount'])
        ) ||
        // Logged-in users can change likeCount by +/- 1, and change nothing else
        (
          request.auth != null &&
          request.resource.data.likeCount - resource.data.likeCount in [1, -1] &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount'])
        );
    }
  }
}
